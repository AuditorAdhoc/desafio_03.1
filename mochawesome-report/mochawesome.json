{
  "stats": {
    "suites": 3,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2025-07-22T01:04:53.091Z",
    "end": "2025-07-22T01:04:53.311Z",
    "duration": 220,
    "testsRegistered": 6,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f4d76c0f-89d1-4e2d-93ce-822f5650fc45",
      "title": "",
      "fullFile": "C:\\Projetos\\Mentoria 2.0\\desafio_03.1\\test\\login.test.js",
      "file": "\\test\\login.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e8da758f-bc32-4a53-a7e7-25e97ee8f64d",
          "title": "Login",
          "fullFile": "C:\\Projetos\\Mentoria 2.0\\desafio_03.1\\test\\login.test.js",
          "file": "\\test\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "848f7a80-46fc-4a35-b889-98542b7b1199",
              "title": "POST/auth/login",
              "fullFile": "C:\\Projetos\\Mentoria 2.0\\desafio_03.1\\test\\login.test.js",
              "file": "\\test\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar CODE 200 e mensagem \"Login realizado com sucesso\" quando usar credenciais válidas ",
                  "fullTitle": "Login POST/auth/login Deve retornar CODE 200 e mensagem \"Login realizado com sucesso\" quando usar credenciais válidas ",
                  "timedOut": false,
                  "duration": 101,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bodyLogin = { ...postLogin }\nbodyLogin.password = \"senha123\"\nconst resposta = await request(process.env.BASE_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send(bodyLogin)\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body.mensagem).to.equal(\"Login realizado com sucesso!\")",
                  "err": {},
                  "uuid": "58e23df2-20f7-4fcd-91c0-266201d9cef4",
                  "parentUUID": "848f7a80-46fc-4a35-b889-98542b7b1199",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar CODE 404 e mensagem \"Usuário não cadastrado.\" quando usar credenciais não cadastradas",
                  "fullTitle": "Login POST/auth/login Deve retornar CODE 404 e mensagem \"Usuário não cadastrado.\" quando usar credenciais não cadastradas",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bodyLogin = { ...postLogin }\nbodyLogin.username = \"usuario-nao-cadastrado\"\nconst resposta = await request(process.env.BASE_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send(bodyLogin)\nexpect(resposta.status).to.equal(404);\nexpect(resposta.body.mensagem).to.equal(\"Usuário não cadastrado.\")",
                  "err": {},
                  "uuid": "2f371b97-85c9-40b2-a814-a6baad2d728b",
                  "parentUUID": "848f7a80-46fc-4a35-b889-98542b7b1199",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar CODE 401 e mensagem \"Credenciais inválidas.\" quando usar credenciais inválidas",
                  "fullTitle": "Login POST/auth/login Deve retornar CODE 401 e mensagem \"Credenciais inválidas.\" quando usar credenciais inválidas",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bodyLogin = { ...postLogin }\nconst resposta = await request(process.env.BASE_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send(bodyLogin)\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body.mensagem).to.equal(\"Credenciais inválidas.\")",
                  "err": {},
                  "uuid": "df9bff15-cc09-414c-bf7f-23db4069d83b",
                  "parentUUID": "848f7a80-46fc-4a35-b889-98542b7b1199",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar CODE 401 e mensagem \"Usuário bloqueado por excesso de tentativas.\" quando usar credenciais inválidas por 3 tentativas",
                  "fullTitle": "Login POST/auth/login Deve retornar CODE 401 e mensagem \"Usuário bloqueado por excesso de tentativas.\" quando usar credenciais inválidas por 3 tentativas",
                  "timedOut": false,
                  "duration": 37,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const bodyLogin = { ...postLogin }\nawait request(process.env.BASE_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send(bodyLogin)\nawait request(process.env.BASE_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send(bodyLogin)\nconst resposta = await request(process.env.BASE_URL)\n    .post('/auth/login')\n    .set('Content-Type', 'application/json')\n    .send(bodyLogin)\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body.mensagem).to.equal(\"Usuário bloqueado por excesso de tentativas.\")",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 401",
                    "estack": "AssertionError: expected 403 to equal 401\n    at Context.<anonymous> (test\\login.test.js:52:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 403\n+ 401\n"
                  },
                  "uuid": "8fc83ada-6ef4-40b4-8c39-5c92ca678708",
                  "parentUUID": "848f7a80-46fc-4a35-b889-98542b7b1199",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58e23df2-20f7-4fcd-91c0-266201d9cef4",
                "2f371b97-85c9-40b2-a814-a6baad2d728b",
                "df9bff15-cc09-414c-bf7f-23db4069d83b"
              ],
              "failures": [
                "8fc83ada-6ef4-40b4-8c39-5c92ca678708"
              ],
              "pending": [],
              "skipped": [],
              "duration": 155,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "850848d5-3afc-4a90-b2fc-2644c2b3631c",
              "title": "POST/auth/forgot-password",
              "fullFile": "C:\\Projetos\\Mentoria 2.0\\desafio_03.1\\test\\login.test.js",
              "file": "\\test\\login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar CODE 200 quando o lembrete de senha for enviado com sucesso",
                  "fullTitle": "Login POST/auth/forgot-password Deve retornar CODE 200 quando o lembrete de senha for enviado com sucesso",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n    .post('/auth/forgot-password')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': \"usuario1\"\n    })\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body.lembrete).to.equal(\"Seu lembrete de senha foi encaminhado para o email cadastrado: *******@email.com\")",
                  "err": {},
                  "uuid": "fce9a294-b3f3-4ab3-a8b1-a01c7d735a8c",
                  "parentUUID": "850848d5-3afc-4a90-b2fc-2644c2b3631c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar CODE 404 quando o usuário não estiver cadastrado",
                  "fullTitle": "Login POST/auth/forgot-password Deve retornar CODE 404 quando o usuário não estiver cadastrado",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n    .post('/auth/forgot-password')\n    .set('Content-Type', 'application/json')\n    .send({\n        'username': \"usuario-nao-cadastrado\"\n    })\nexpect(resposta.status).to.equal(404);\nexpect(resposta.body.mensagem).to.equal(\"Usuário não cadastrado.\")",
                  "err": {},
                  "uuid": "2c1db066-5df5-4e36-8fff-58dc9ea18a5f",
                  "parentUUID": "850848d5-3afc-4a90-b2fc-2644c2b3631c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fce9a294-b3f3-4ab3-a8b1-a01c7d735a8c",
                "2c1db066-5df5-4e36-8fff-58dc9ea18a5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}