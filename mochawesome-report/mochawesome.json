{
  "stats": {
    "suites": 3,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-21T01:06:40.512Z",
    "end": "2025-07-21T01:06:40.544Z",
    "duration": 32,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "df08d48c-1aae-40a7-b118-148a6b9302bb",
      "title": "",
      "fullFile": "/home/lucastiago/Documentos/Projetos/Mentoria2.0/desafioAPI/desafio_03.1.2/test/login.test.js",
      "file": "/test/login.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4f3fbea5-dbad-47ce-aec7-b0b6d209502c",
          "title": " [login] Login",
          "fullFile": "/home/lucastiago/Documentos/Projetos/Mentoria2.0/desafioAPI/desafio_03.1.2/test/login.test.js",
          "file": "/test/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fa6ea1a8-acae-45b1-8c18-5bb69ee167ff",
              "title": " POST/auth/login",
              "fullFile": "/home/lucastiago/Documentos/Projetos/Mentoria2.0/desafioAPI/desafio_03.1.2/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Deve retornar status 200 e mensagem \"Login realizado com sucesso\" quando usar credenciais válidas ",
                  "fullTitle": " [login] Login  POST/auth/login  Deve retornar status 200 e mensagem \"Login realizado com sucesso\" quando usar credenciais válidas ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n      username: \"usuario1\",\n      password: \"senha123\",\n  })\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body.mensagem).to.equal(\"Login realizado com sucesso!\");",
                  "err": {},
                  "uuid": "9278e630-55a0-40b5-bd67-8809f7ecad99",
                  "parentUUID": "fa6ea1a8-acae-45b1-8c18-5bb69ee167ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Deve retornar status 404 e mensagem \"Usuário não cadastrado.\" quando usar credenciais não cadastradas",
                  "fullTitle": " [login] Login  POST/auth/login  Deve retornar status 404 e mensagem \"Usuário não cadastrado.\" quando usar credenciais não cadastradas",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const login404 = {\n    username: faker.internet.username(), \n    password: faker.internet.password(), \n}\n      const resposta = await request(process.env.BASE_URL)\n.post(\"/auth/login\")\n.set(\"Content-Type\", \"application/json\")\n.send(login404);\nexpect(resposta.status).to.equal(404);\nexpect(resposta.body.mensagem).to.equal(\"Usuário não cadastrado.\");",
                  "err": {},
                  "uuid": "6b3bb6b0-2aad-48fb-8151-f8f8798b9845",
                  "parentUUID": "fa6ea1a8-acae-45b1-8c18-5bb69ee167ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "  Deve retornar status 401 e mensagem \"Credenciais inválidas.\" quando usar credenciais inválidas",
                  "fullTitle": " [login] Login  POST/auth/login   Deve retornar status 401 e mensagem \"Credenciais inválidas.\" quando usar credenciais inválidas",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n    password: \"senha-invalida\",\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body.mensagem).to.equal(\"Credenciais inválidas.\");",
                  "err": {},
                  "uuid": "871ea829-14ba-45d5-8c4b-f4f10bfb3489",
                  "parentUUID": "fa6ea1a8-acae-45b1-8c18-5bb69ee167ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Deve retornar status 401 e mensagem \"Usuário bloqueado por excesso de tentativas.\" quando usar credenciais inválidas por 3 tentativas",
                  "fullTitle": " [login] Login  POST/auth/login  Deve retornar status 401 e mensagem \"Usuário bloqueado por excesso de tentativas.\" quando usar credenciais inválidas por 3 tentativas",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n    password: \"senha-invalida\",\n  });\nawait request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n    password: \"senha-invalida\",\n  });\nconst resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n    password: \"senha-invalida\",\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body.mensagem).to.equal(\n  \"Usuário bloqueado por excesso de tentativas.\"\n);",
                  "err": {},
                  "uuid": "8b80af40-0de7-425c-a6bd-121a54aace1f",
                  "parentUUID": "fa6ea1a8-acae-45b1-8c18-5bb69ee167ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Deve retornar status 400 e mensagem \"Usuário e senha são obrigatórios.\" quando não preencher campo password",
                  "fullTitle": " [login] Login  POST/auth/login  Deve retornar status 400 e mensagem \"Usuário e senha são obrigatórios.\" quando não preencher campo password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: faker.internet.username(),\n    password: \"\",\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.mensagem).to.equal(\n  \"Usuário e senha são obrigatórios.\"\n);",
                  "err": {},
                  "uuid": "62281e37-f9bb-49cf-ab59-e8051fca7a90",
                  "parentUUID": "fa6ea1a8-acae-45b1-8c18-5bb69ee167ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9278e630-55a0-40b5-bd67-8809f7ecad99",
                "6b3bb6b0-2aad-48fb-8151-f8f8798b9845",
                "871ea829-14ba-45d5-8c4b-f4f10bfb3489",
                "8b80af40-0de7-425c-a6bd-121a54aace1f",
                "62281e37-f9bb-49cf-ab59-e8051fca7a90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "67a417f5-82bd-42c7-9b07-69f90a7b6e02",
              "title": "[forgot] POST/auth/forgot-password",
              "fullFile": "/home/lucastiago/Documentos/Projetos/Mentoria2.0/desafioAPI/desafio_03.1.2/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar status 200 quando o lembrete de senha for enviado com sucesso",
                  "fullTitle": " [login] Login [forgot] POST/auth/forgot-password Deve retornar status 200 quando o lembrete de senha for enviado com sucesso",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/forgot-password\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n  });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body.lembrete).to.equal(\n  \"Seu lembrete de senha foi encaminhado para o email cadastrado: *******@email.com\"\n);",
                  "err": {},
                  "uuid": "97d4a7b1-e17c-4ba0-9fe4-6ff9113c66b0",
                  "parentUUID": "67a417f5-82bd-42c7-9b07-69f90a7b6e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 404 quando o usuário não estiver cadastrado",
                  "fullTitle": " [login] Login [forgot] POST/auth/forgot-password Deve retornar status 404 quando o usuário não estiver cadastrado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userNotFound = {\n    username: faker.internet.username()\n}\n  const resposta = await request(process.env.BASE_URL)\n    .post(\"/auth/forgot-password\")\n    .set(\"Content-Type\", \"application/json\")\n    .send(userNotFound)\n  expect(resposta.status).to.equal(404);\n  expect(resposta.body.mensagem).to.equal(\"Usuário não cadastrado.\");",
                  "err": {},
                  "uuid": "8a67a1d1-258d-4ff9-a8b1-bc70573b8419",
                  "parentUUID": "67a417f5-82bd-42c7-9b07-69f90a7b6e02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97d4a7b1-e17c-4ba0-9fe4-6ff9113c66b0",
                "8a67a1d1-258d-4ff9-a8b1-bc70573b8419"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}